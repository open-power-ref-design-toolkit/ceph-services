#!/bin/bash
#
# Copyright 2016 IBM Corp.
#
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

typeset prep_file=/tmp/output.ceph.diskprep
typeset sort_file=/tmp/output.ceph.diskprep.sorted

typeset disk_list
typeset already_cleaned_disk_list

typeset rootpart_device

function find_rootpart_device
{
    typeset part

    part=`df --output=source / | tail -n 1 | awk -F/ '{print $3}'`
    rootpart_device=`echo $part | sed 's/[0-9]//g'`
}

function clear_disk_list
{
    disk_list=
    rm -f ${prep_file} 2>&1 >/dev/null
    rm -f ${sort_file} 2>&1 >/dev/null
}

function append_disk_list
{
    typeset disk_name=$1
    typeset -i by_disk_name=0

    if [[ "$disk_name" == */dev/sd* ]] ||
       [[ "$disk_name" == */dev/vd* ]] ||
       [[ "$disk_name" == */dev/nvme* ]]; then
        by_disk_name=1
    fi

    if [[ $by_disk_name -eq 0 ]]; then
        echo "Unknown disk_name value $disk_name"
        exit 1
    fi

    # Need to strip off the /dev/ prefix.
    echo $disk_name | awk -F/ '{print $3}' >>${prep_file}
}

function adjust_disk_list
{
    # Always silently avoid the rootpart_device.
    #
    # Use \b to terminate the pattern so that we only
    # remove exact matches of the pattern.
    if [[ -n $rootpart_device ]]; then
        sed -i "/${rootpart_device}\b/d" ${prep_file}
    fi

    # Initially those names may be unsorted but
    # we want to sort them by sdX, vdX, or nvmeX name.
    cat ${prep_file} |  grep -E "^sd|^vd|^nvme" | uniq | sort >${sort_file}
}

function read_adjusted_disk_list
{
    # Read the sorted file to generate the in memory list.
    while read disk_name
    do
        if [[ -z $disk_list ]]; then
            disk_list="$disk_name"
        else
            disk_list="$disk_list $disk_name"
        fi
    done < ${sort_file}
}

function complete_disk_list
{
    adjust_disk_list
    read_adjusted_disk_list
}

# returns 0 for true and 1 for false.
function is_mounted
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda

    # The requirement for this grep is that it finds /dev/sda itself,
    # finds parts such as /dev/sda1 or /dev/sda2, but does not find
    # devices with a similar name such as /dev/sdaa.
    #
    # Thus the [0-9]? after the device name says the numbers may or
    # may not be present.  The $ at the end says the pattern is
    # immediately followed by a newline, which should eliminate
    # /dev/sdaa.
    mount | awk '{print $1}' | grep -E "${device}[0-9]?[0-9]?$"
    return $?
}

function do_umount
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda

    # See is_mounted.
    for name in `mount | awk '{print $1}' | grep -E "${device}[0-9]?[0-9]?$"`
    do
        umount $name
    done
}

# returns 0 for true and 1 for false.
function is_lvm_physical_volume
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda

    pvdisplay | grep "${device}\b"
    return $?
}

function deactivate_lvm_volume_group
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda
    typeset vg

    vg=`pvdisplay $device | grep "VG Name" | awk '{print $3}'`

    if [[ -n $vg ]]; then
        vgchange -an $vg
    fi
}

function remove_lvm_physical_volume
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda

    pvremove -ff -y $device
}

function zap_disk
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda
    typeset dev_end
    typeset gpt_end

    sgdisk --zap-all $device
    sgdisk --clear --mbrtogpt $device
    dev_end=`blockdev --getsz $device`
    ((gpt_end=$dev_end-100))

    dd if=/dev/zero of=$device bs=1M count=1
    dd if=/dev/zero of=$device bs=512 count=100 seek=$gpt_end
}

function clean_disk
{
    typeset device=$1    # device is assumed to be a disk like /dev/sda
    typeset rc

    is_mounted $device
    rc=$?
    if [[ $rc -eq 0 ]] ; then
        do_umount $device
    fi

    is_lvm_physical_volume $device
    rc=$?
    if [[ $rc -eq 0 ]] ; then
        deactivate_lvm_volume_group $device
        remove_lvm_physical_volume $device
    fi
    zap_disk $device
}

function zap_disk_list
{
    typeset disk_name

    for disk_name in $disk_list
    do
        # Ensure these cleanup steps only ever execute once per disk.
        # Otherwise for the case where a disk is present on more than
        # one disk_list (journal/osd) it would be setup
        # and cleaned up once per list instead of once per disk.
        if [[ -n $already_cleaned_disk_list ]] &&
           [[ $already_cleaned_disk_list =~ $disk_name ]]; then
            continue
        fi

        # Unmount the disk if mounted.
        # Clean off lvm if necessary.
        # Use sgdisk --zap-all and dd to wipe key
        # sections of the disk platter.
        clean_disk /dev/${disk_name}

        if [[ -z $already_cleaned_disk_list ]]; then
            already_cleaned_disk_list="$disk_name"
        else
            already_cleaned_disk_list="$already_cleaned_disk_list $disk_name"
        fi
    done
}


find_rootpart_device

{% if journal_devices is defined %}
clear_disk_list
{% for item in (journal_devices | unique) %}
append_disk_list {{ item }}
{% endfor %}
complete_disk_list
zap_disk_list
{% endif %}

{% if osd_devices is defined %}
clear_disk_list
{% for item in (osd_devices | unique) %}
append_disk_list {{ item }}
{% endfor %}
complete_disk_list
zap_disk_list
{% endif %}

clear_disk_list

exit 0
